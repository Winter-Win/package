1、调整数组顺序使奇数位于偶数前面
https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&tqId=11166&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking

输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变

class Solution {
public:
    void reOrderArray(vector<int> &array) {
        //方法一：先将偶数都放在一个数组里，同时从原数组删除掉，最后再将其加在数组后面
        //但是时间复杂度和空间都有消耗
        vector<int> ret;
        auto it = array.begin();
        while(it != array.end())
        {
            if(*it % 2 == 0)
            {
                ret.push_back(*it);
                array.erase(it);
            }
            else
            {
                it++;
            }
        }
        
        for(auto e : ret)
        {
            array.push_back(e);
        }
    }
};



class Solution {
public:
    void reOrderArray(vector<int> &array) {
        //方法二：类似于冒泡排序，从前往后，如果遇到相邻的先偶后奇就交换位置
        //或者从后往前冒泡，如果遇到相邻的前偶后奇就交换位置
        for(size_t i = 0; i < array.size(); ++i)
        {
            //控制j > i,减少遍历次数
            for(size_t j = array.size() - 1; j > i; --j)
            {
                if(array[j] % 2 == 1 && array[j - 1] % 2 == 0)
                    swap(array[j], array[j-1]);
            }
        }
    }
};



2、最小的K个数
https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&tqId=11182&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking

输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。

class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        sort(input.begin(), input.end());
        vector<int> ret;
	//当k比数组长度还大的话，直接就是返回空，也可以包括原数组可能没数据
        if(k > input.size())
        {
            return ret;
        }
        
        for(size_t i = 0; i < k; ++i)
        {
            ret.push_back(input[i]);
        }
        return ret;
    }
};